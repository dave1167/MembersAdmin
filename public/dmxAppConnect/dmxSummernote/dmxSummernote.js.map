{"version":3,"sources":["components/summernote.js"],"names":["dmx","Component","initialData","disabled","value","attributes","type","String","default","Boolean","config","Object","height","Number","minHeight","maxHeight","autofocus","lang","airMode","toolbar","Array","toolbarImage","toolbarLink","toolbarTable","toolbarAir","blockquoteBreakingLevel","styleTags","fontNames","fontNamesIgnoreCheck","fontSizeUnits","lineHeights","placeholder","dialogsInBody","dialogsFade","disableDrop","disableShortcuts","disableTab","disableSpellcheck","disableGrammar","methods","disable","this","_disable","empty","_empty","enable","_enable","insertText","str","_innerText","pasteHTML","_pasteHTML","redo","_redo","reset","_reset","setValue","_setValue","undo","_undo","status","message","_editor","layoutInfo","editor","find","html","info","success","warning","danger","invoke","action","arg","events","blur","Event","change","changed","enter","focus","init","input","updated","buttonclick","mediadelete","node","_blurHandler","bind","_changeHandler","_enterHandler","_focusHandler","_initHandler","_mediaDeleteHandler","_config","popover","$","summernote","options","_callbacks","callbacks","onBlur","onChange","onEnter","onFocus","onInit","onMediaDelete","render","_initEditor","performUpdate","updatedProps","has","code","props","destroy","clone","disableDragAndDrop","shortcuts","tabDisable","spellCheck","isArray","filter","group","length","image","link","table","air","console","error","extend","_plugins","_buttons","$node","data","statusbar","remove","set","nextTick","dispatchEvent","_code","target","src","attr","_toCamelCase","replace","a","b","toUpperCase","$parseAttributes","BaseComponent","prototype","call","buttons","dom","getAttributes","forEach","name","plugin","argument","parse","e","button","icon","tooltip","click","context","ui","contents"],"mappings":"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","file":"dmxSummernote.js","sourcesContent":["dmx.Component('summernote', {\r\n\r\n  initialData: {\r\n    disabled: false,\r\n    value: '',\r\n  },\r\n\r\n  attributes: {\r\n    value: {\r\n      type: String,\r\n      default: '',\r\n    },\r\n\r\n    disabled: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n\r\n    config: {\r\n      type: Object,\r\n      default: {},\r\n    },\r\n\r\n    height: {\r\n      type: Number,\r\n      default: null,\r\n    },\r\n\r\n    minHeight: {\r\n      type: Number,\r\n      default: null,\r\n    },\r\n\r\n    maxHeight: {\r\n      type: Number,\r\n      default: null,\r\n    },\r\n\r\n    autofocus: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n\r\n    lang: {\r\n      type: String,\r\n      default: 'en-US',\r\n    },\r\n\r\n    airMode: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n\r\n    toolbar: {\r\n      type: Array,\r\n      default: null, // use default from summernote (https://summernote.org/deep-dive/#custom-toolbar-popover)\r\n    },\r\n\r\n    toolbarImage: {\r\n      type: Array,\r\n      default: null, // use default from summernote (popover:{image:[...]})\r\n    },\r\n\r\n    toolbarLink: {\r\n      type: Array,\r\n      default: null, // use default from summernote (popover:{link:[...]})\r\n    },\r\n\r\n    toolbarTable: {\r\n      type: Array,\r\n      default: null, // use default from summernote (popover:{table:[...]})\r\n    },\r\n\r\n    toolbarAir: {\r\n      type: Array,\r\n      default: null, // use default from summernote (popover:{air:[...]})\r\n    },\r\n\r\n    blockquoteBreakingLevel: {\r\n      // https://summernote.org/deep-dive/#blockquote-breaking-level\r\n      type: Number,\r\n      default: 2,\r\n    },\r\n\r\n    styleTags: {\r\n      // https://summernote.org/deep-dive/#custom-styles\r\n      type: Array,\r\n      default: null,\r\n    },\r\n\r\n    fontNames: {\r\n      // https://summernote.org/deep-dive/#custom-fontnames\r\n      type: Array,\r\n      default: null,\r\n    },\r\n\r\n    fontNamesIgnoreCheck: {\r\n      // https://summernote.org/deep-dive/#custom-fontnames\r\n      type: Array,\r\n      default: null,\r\n    },\r\n\r\n    fontSizeUnits: {\r\n      // https://summernote.org/deep-dive/#custom-font-size-units\r\n      type: Array,\r\n      default: null,\r\n    },\r\n\r\n    lineHeights: {\r\n      // https://summernote.org/deep-dive/#custom-line-heights\r\n      type: Array,\r\n      default: null,\r\n    },\r\n\r\n    placeholder: {\r\n      type: String,\r\n      default: null,\r\n    },\r\n\r\n    dialogsInBody: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n\r\n    dialogsFade: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n\r\n    disableDrop: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n\r\n    disableShortcuts: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n\r\n    disableTab: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n\r\n    disableSpellcheck: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n\r\n    disableGrammar: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n  },\r\n\r\n  methods: {\r\n    disable () {\r\n      this._disable();\r\n    },\r\n\r\n    empty () {\r\n      this._empty();\r\n    },\r\n\r\n    enable () {\r\n      this._enable();\r\n    },\r\n\r\n    insertText (str) {\r\n      this._innerText(str);\r\n    },\r\n\r\n    pasteHTML (str) {\r\n      this._pasteHTML(str);\r\n    },\r\n\r\n    redo () {\r\n      this._redo();\r\n    },\r\n\r\n    reset () {\r\n      this._reset();\r\n    },\r\n\r\n    setValue (value) {\r\n      this._setValue(value);\r\n    },\r\n\r\n    undo () {\r\n      this._undo();\r\n    },\r\n\r\n    status (message) {\r\n      this._editor.layoutInfo.editor.find('.note-status-output').html(message);\r\n    },\r\n\r\n    info (message) {\r\n      this._editor.layoutInfo.editor\r\n        .find('.note-status-output')\r\n        .html('<div class=\"alert alert-info\">' + message + '</div>');\r\n    },\r\n\r\n    success (message) {\r\n      this._editor.layoutInfo.editor\r\n        .find('.note-status-output')\r\n        .html('<div class=\"alert alert-success\">' + message + '</div>');\r\n    },\r\n\r\n    warning (message) {\r\n      this._editor.layoutInfo.editor\r\n        .find('.note-status-output')\r\n        .html('<div class=\"alert alert-warning\">' + message + '</div>');\r\n    },\r\n\r\n    danger (message) {\r\n      this._editor.layoutInfo.editor\r\n        .find('.note-status-output')\r\n        .html('<div class=\"alert alert-danger\">' + message + '</div>');\r\n    },\r\n\r\n    invoke (action, arg) {\r\n      this._editor.invoke(action, arg);\r\n    },\r\n  },\r\n\r\n  events: {\r\n    blur: Event,\r\n    change: Event,\r\n    changed: Event,\r\n    enter: Event,\r\n    focus: Event,\r\n    init: Event,\r\n    input: Event,\r\n    updated: Event,\r\n    buttonclick: Event,\r\n    mediadelete: Event,\r\n  },\r\n\r\n  init (node) {\r\n    this._blurHandler = this._blurHandler.bind(this);\r\n    this._changeHandler = this._changeHandler.bind(this);\r\n    this._enterHandler = this._enterHandler.bind(this);\r\n    this._focusHandler = this._focusHandler.bind(this);\r\n    this._initHandler = this._initHandler.bind(this);\r\n    this._mediaDeleteHandler = this._mediaDeleteHandler.bind(this);\r\n\r\n    this._config = { popover: $.summernote.options.popover };\r\n\r\n    this._callbacks = {\r\n      callbacks: {\r\n        onBlur: this._blurHandler,\r\n        onChange: this._changeHandler,\r\n        onEnter: this._enterHandler,\r\n        onFocus: this._focusHandler,\r\n        onInit: this._initHandler,\r\n        onMediaDelete: this._mediaDeleteHandler,\r\n      },\r\n    };\r\n  },\r\n\r\n  render (node) {\r\n    this._initEditor();\r\n  },\r\n\r\n  performUpdate (updatedProps) {\r\n    if (updatedProps.has('value')) {\r\n      this._editor.code(this.props.value);\r\n    }\r\n\r\n    if (updatedProps.has('disabled')) {\r\n      this._editor.invoke(this.props.disabled ? 'disable' : 'enable');\r\n    }\r\n  },\r\n\r\n  destroy () {\r\n    this._editor.destroy();\r\n  },\r\n\r\n  _initEditor () {\r\n    const config = dmx.clone(this._config);\r\n\r\n    config.height = this.props.height;\r\n    config.minHeight = this.props.minHeight;\r\n    config.maxHeight = this.props.maxHeight;\r\n    config.focus = this.props.autofocus;\r\n    config.lang = this.props.lang;\r\n    config.airMode = this.props.airMode;\r\n    config.placeholder = this.props.placeholder;\r\n    config.dialogsInBody = this.props.dialogsInBody;\r\n    config.dialogsFade = this.props.dialogsFade;\r\n    config.disableDragAndDrop = this.props.disableDrop;\r\n    config.shortcuts = !this.props.disableShortcuts;\r\n    config.tabDisable = this.props.disableTab;\r\n    config.spellCheck = !this.props.disableSpellcheck;\r\n    config.disableGrammar = this.props.disableGrammar;\r\n    config.blockquoteBreakingLevel = this.props.blockquoteBreakingLevel;\r\n\r\n    if (Array.isArray(this.props.toolbar)) {\r\n      // extra filter for empty group generated in Wappler\r\n      config.toolbar = this.props.toolbar.filter(function (group) {\r\n        return group.length;\r\n      });\r\n    }\r\n\r\n    if (Array.isArray(this.props.toolbarImage)) {\r\n      config.popover = config.popover || {};\r\n      config.popover.image = this.props.toolbarImage.filter(function (group) {\r\n        return group.length;\r\n      });\r\n    }\r\n\r\n    if (Array.isArray(this.props.toolbarLink)) {\r\n      config.popover = config.popover || {};\r\n      config.popover.link = this.props.toolbarLink.filter(function (group) {\r\n        return group.length;\r\n      });\r\n    }\r\n\r\n    if (Array.isArray(this.props.toolbarTable)) {\r\n      config.popover = config.popover || {};\r\n      config.popover.table = this.props.toolbarTable.filter(function (group) {\r\n        return group.length;\r\n      });\r\n    }\r\n\r\n    if (Array.isArray(this.props.toolbarAir)) {\r\n      config.popover = config.popover || {};\r\n      config.popover.air = this.props.toolbarAir.filter(function (group) {\r\n        return group.length;\r\n      });\r\n    }\r\n\r\n    if (Array.isArray(this.props.styleTags)) {\r\n      config.styleTags = this.props.styleTags;\r\n    }\r\n\r\n    if (Array.isArray(this.props.fontNames)) {\r\n      config.fontNames = this.props.fontNames;\r\n    }\r\n\r\n    if (Array.isArray(this.props.fontNamesIgnoreCheck)) {\r\n      config.fontNamesIgnoreCheck = this.props.fontNamesIgnoreCheck;\r\n    }\r\n\r\n    if (Array.isArray(this.props.fontSizeUnits)) {\r\n      config.fontSizeUnits = this.props.fontSizeUnits;\r\n    }\r\n\r\n    if (Array.isArray(this.props.lineHeights)) {\r\n      config.lineHeights = this.props.lineHeights;\r\n    }\r\n\r\n    if (!$.summernote.lang[config.lang]) {\r\n      console.error(`Summernote \"${config.lang}\" lang file must be included.`);\r\n    }\r\n\r\n    $.extend(true, config, this.props.config, this._plugins, this._buttons, this._callbacks);\r\n\r\n    $(this.$node).summernote(config);\r\n\r\n    this._editor = $(this.$node).data('summernote');\r\n\r\n    this._editor.layoutInfo.statusbar.find('.note-status-output').remove();\r\n\r\n    if (this.props.disabled) {\r\n      this._disable();\r\n    }\r\n  },\r\n\r\n  _enable () {\r\n    this._editor.enable();\r\n    this.set('disabled', false);\r\n  },\r\n\r\n  _disable () {\r\n    this._editor.disable();\r\n    this.set('disabled', true);\r\n  },\r\n\r\n  _empty () {\r\n    this._editor.empty();\r\n  },\r\n\r\n  _innerText (str) {\r\n    this._editor.insertText(str);\r\n  },\r\n\r\n  _pasteHTML (str) {\r\n    this._editor.pasteHTML(str);\r\n  },\r\n\r\n  _undo () {\r\n    this._editor.undo();\r\n  },\r\n\r\n  _redo () {\r\n    this._editor.redo();\r\n  },\r\n\r\n  _reset () {\r\n    this._editor.reset();\r\n  },\r\n\r\n  _setValue (value) {\r\n    this._editor.reset();\r\n    if (value) {\r\n      this._editor.code(value);\r\n    }\r\n    this.set('value', value);\r\n    dmx.nextTick(() => this.dispatchEvent('updated'));\r\n  },\r\n\r\n  _initHandler () {\r\n    this.dispatchEvent('init');\r\n  },\r\n\r\n  _focusHandler () {\r\n    this._code = this._editor.code();\r\n    this.dispatchEvent('focus');\r\n  },\r\n\r\n  _blurHandler () {\r\n    if (this._code !== this._editor.code()) {\r\n      this.dispatchEvent('change');\r\n      dmx.nextTick(() => this.dispatchEvent('changed'));\r\n    }\r\n    this.dispatchEvent('blur');\r\n  },\r\n\r\n  _enterHandler () {\r\n    this.dispatchEvent('enter');\r\n  },\r\n\r\n  _changeHandler () {\r\n    const value = this._editor.invoke('isEmpty') ? '' : this._editor.code();\r\n\r\n    if (this.data.value !== value) {\r\n      this.set('value', value);\r\n      dmx.nextTick(() => this.dispatchEvent('updated'));\r\n    }\r\n\r\n    this.dispatchEvent('input');\r\n  },\r\n\r\n  _mediaDeleteHandler (target) {\r\n    const src = $(target[0]).attr('src');\r\n    this.dispatchEvent('mediadelete', null, { src });\r\n  },\r\n\r\n  _toCamelCase (str) {\r\n    return str.replace(/-(\\w)/g, function (a, b) {\r\n      return b.toUpperCase();\r\n    });\r\n  },\r\n\r\n  $parseAttributes (node) {\r\n    dmx.BaseComponent.prototype.$parseAttributes.call(this, node);\r\n\r\n    this._plugins = {};\r\n    this._buttons = { buttons: {} };\r\n\r\n    dmx.dom.getAttributes(node).forEach(attr => {\r\n      if (attr.name == 'plugin') {\r\n        try {\r\n          const plugin = this._toCamelCase(attr.argument);\r\n          this._plugins[plugin] = $.extend({}, $.summernote.options[plugin], dmx.parse(attr.value, this));\r\n        } catch (e) {\r\n          console.error(e);\r\n        }\r\n      }\r\n\r\n      if (attr.name == 'button') {\r\n        try {\r\n          const button = this._toCamelCase(attr.argument);\r\n          const { icon, tooltip, click } = dmx.parse(attr.value, this);\r\n          this._buttons.buttons[button] = context => {\r\n            const ui = $.summernote.ui;\r\n\r\n            const button = ui.button({\r\n              contents: `<i class=\"${icon}\"/>`,\r\n              tooltip: tooltip || '',\r\n              click: () => {\r\n                if (typeof click == 'string') {\r\n                  dmx.parse(click, this);\r\n                }\r\n\r\n                this.dispatchEvent('buttonclick', null, {\r\n                  editor: this.name,\r\n                  button,\r\n                });\r\n              },\r\n            });\r\n\r\n            return button.render();\r\n          };\r\n        } catch (e) {\r\n          console.error(e);\r\n        }\r\n      }\r\n    });\r\n  },\r\n\r\n  /*\r\n\r\n\r\n\r\n  onBlur: function () {\r\n    if (this.orgValue != this.editor.code()) {\r\n      this.dispatchEvent('change');\r\n      var self = this;\r\n      dmx.nextTick(function () {\r\n        self.dispatchEvent('changed');\r\n      });\r\n    }\r\n    this.dispatchEvent('blur');\r\n  },\r\n\r\n  onChange: function () {\r\n    this.updated();\r\n    this.dispatchEvent('input');\r\n  },\r\n\r\n  onEnter: function () {\r\n    this.dispatchEvent('enter');\r\n  },\r\n\r\n  onFocus: function () {\r\n    this.orgValue = this.editor.code();\r\n    this.dispatchEvent('focus');\r\n  },\r\n\r\n  onInit: function () {\r\n    this.dispatchEvent('init');\r\n  },\r\n\r\n  onMediaDelete: function (target) {\r\n    var src = $(target[0]).attr('src');\r\n    this.dispatchEvent('mediadelete', null, { src: src });\r\n  },\r\n\r\n  toCamelCase: function (str) {\r\n    return str.replace(/-(\\w)/g, function (a, b) {\r\n      return b.toUpperCase();\r\n    });\r\n  },\r\n\r\n  $parseAttributes: function (node) {\r\n    var self = this;\r\n\r\n    dmx.BaseComponent.prototype.$parseAttributes.call(this, node);\r\n\r\n    dmx.dom.getAttributes(node).forEach(function (attr) {\r\n      if (attr.name == 'plugin') {\r\n        self.$addBinding(attr.value, function (value) {\r\n          if (value) {\r\n            self.plugins[this.toCamelCase(attr.argument)] = $.extend({}, $.summernote.options[attr.argument], value);\r\n          } else {\r\n            delete self.plugins[attr.argument];\r\n          }\r\n\r\n          self.plugins.updated = true;\r\n        });\r\n      }\r\n\r\n      if (attr.name == 'button') {\r\n        self.$addBinding(attr.value, function (value) {\r\n          if (value && value.icon) {\r\n            var name = this.toCamelCase(attr.argument);\r\n\r\n            self.buttons.buttons[name] = function (context) {\r\n              var ui = $.summernote.ui;\r\n\r\n              var button = ui.button({\r\n                contents: '<i class=\"' + value.icon + '\"/>',\r\n                tooltip: value.tooltip || '',\r\n                click: function () {\r\n                  if (typeof value.click == 'string') {\r\n                    dmx.parse(value.click, self);\r\n                  }\r\n\r\n                  self.dispatchEvent('buttonclick', null, {\r\n                    editor: self.name,\r\n                    button: name,\r\n                  });\r\n                },\r\n              });\r\n\r\n              return button.render();\r\n            };\r\n\r\n            self.buttons.updated = true;\r\n          }\r\n        });\r\n      }\r\n    });\r\n  },\r\n\r\n  render: function (node) {\r\n    this.$node = node;\r\n  },\r\n\r\n  mounted: function () {\r\n    var value = this.$node.tagName == 'TEXTAREA' ? this.$node.value.trim() : this.$node.innerHTML.trim();\r\n\r\n    if (value.indexOf('{{') !== -1) {\r\n      this.$addBinding(value, this.setValue);\r\n    }\r\n\r\n    this.update({});\r\n  },\r\n\r\n  update: function (props) {\r\n    if (this.plugins.updated || this.buttons.updated || !dmx.equal(props, this.props)) {\r\n      delete this.plugins.updated;\r\n      delete this.buttons.updated;\r\n\r\n      if (props.value != this.props.value) {\r\n        this.setValue(this.props.value);\r\n      }\r\n\r\n      if (this.editor) {\r\n        this.editor.destroy();\r\n        this.editor = null;\r\n      }\r\n\r\n      if (!this.isDelayed) {\r\n        this.isDelayed = true;\r\n        dmx.nextTick(function () {\r\n          this.isDelayed = false;\r\n          this.initEditor();\r\n        }, this);\r\n      }\r\n    }\r\n  },\r\n\r\n  updated: function () {\r\n    var oldValue = this.data.value;\r\n\r\n    if (this.editor) {\r\n      if ($(this.$node).summernote('isEmpty')) {\r\n        this.set('value', '');\r\n      } else {\r\n        this.set('value', this.editor.code());\r\n      }\r\n    } else {\r\n      var value = this.$node.tagName == 'TEXTAREA' ? this.$node.value.trim() : this.$node.innerHTML.trim();\r\n      this.set('value', value);\r\n    }\r\n\r\n    if (!this.updating && oldValue != this.data.value) {\r\n      this.isUpdated = true;\r\n      dmx.nextTick(function () {\r\n        this.isUpdated = false;\r\n        this.dispatchEvent('updated');\r\n      }, this);\r\n    }\r\n  },\r\n\r\n  beforeDestroy: function () {\r\n    this.editor.destroy();\r\n    this.editor = null;\r\n  },\r\n\r\n  setValue: function (value) {\r\n    if (this.editor) {\r\n      this.editor.reset();\r\n      if (value) {\r\n        this.editor.code(value);\r\n      }\r\n    } else if (this.$node.tagName == 'TEXTAREA') {\r\n      this.$node.value = value;\r\n    } else {\r\n      this.$node.innerHTML = value;\r\n    }\r\n\r\n    this.updated();\r\n  },\r\n\r\n  initEditor: function () {\r\n    var config = dmx.clone(this.config);\r\n\r\n    config.height = this.props['height'];\r\n    config.minHeight = this.props['min-height'];\r\n    config.maxHeight = this.props['max-height'];\r\n    config.focus = this.props['autofocus'];\r\n    config.lang = this.props['lang'];\r\n    config.airMode = this.props['air-mode'];\r\n    config.placeholder = this.props['placeholder'];\r\n    config.dialogsInBody = this.props['dialogs-in-body'];\r\n    config.dialogsFade = this.props['dialogs-fade'];\r\n    config.disableDragAndDrop = this.props['disable-drop'];\r\n    config.shortcuts = !this.props['disable-shortcuts'];\r\n    config.tabDisable = this.props['disable-tab'];\r\n    config.spellCheck = !this.props['disable-spellcheck'];\r\n    config.disableGrammar = this.props['disable-grammar'];\r\n    config.blockquoteBreakingLevel = this.props['blockquote-breaking-level'];\r\n\r\n    if (Array.isArray(this.props['toolbar'])) {\r\n      // extra filter for empty group generated in Wappler\r\n      config.toolbar = this.props['toolbar'].filter(function (group) {\r\n        return group.length;\r\n      });\r\n    }\r\n\r\n    if (Array.isArray(this.props['toolbar-image'])) {\r\n      config.popover = config.popover || {};\r\n      config.popover.image = this.props['toolbar-image'].filter(function (group) {\r\n        return group.length;\r\n      });\r\n    }\r\n\r\n    if (Array.isArray(this.props['toolbar-link'])) {\r\n      config.popover = config.popover || {};\r\n      config.popover.link = this.props['toolbar-link'].filter(function (group) {\r\n        return group.length;\r\n      });\r\n    }\r\n\r\n    if (Array.isArray(this.props['toolbar-table'])) {\r\n      config.popover = config.popover || {};\r\n      config.popover.table = this.props['toolbar-table'].filter(function (group) {\r\n        return group.length;\r\n      });\r\n    }\r\n\r\n    if (Array.isArray(this.props['toolbar-air'])) {\r\n      config.popover = config.popover || {};\r\n      config.popover.air = this.props['toolbar-air'].filter(function (group) {\r\n        return group.length;\r\n      });\r\n    }\r\n\r\n    if (Array.isArray(this.props['style-tags'])) {\r\n      config.styleTags = this.props['style-tags'];\r\n    }\r\n\r\n    if (Array.isArray(this.props['font-names'])) {\r\n      config.fontNames = this.props['font-names'];\r\n    }\r\n\r\n    if (Array.isArray(this.props['font-names-ignore-check'])) {\r\n      config.fontNamesIgnoreCheck = this.props['font-names-ignore-check'];\r\n    }\r\n\r\n    if (Array.isArray(this.props['font-size-units'])) {\r\n      config.fontSizeUnits = this.props['font-size-units'];\r\n    }\r\n\r\n    if (Array.isArray(this.props['line-heights'])) {\r\n      config.lineHeights = this.props['line-heights'];\r\n    }\r\n\r\n    if (!$.summernote.lang[config.lang]) {\r\n      console.error('Summernote \"' + config.lang + '\" lang file must be included.');\r\n    }\r\n\r\n    $.extend(true, config, this.props.config, this.plugins, this.buttons, this.callbacks);\r\n\r\n    $(this.$node).summernote(config);\r\n\r\n    this.editor = $(this.$node).data('summernote');\r\n\r\n    this.editor.layoutInfo.statusbar.find('.note-status-output').remove();\r\n\r\n    if (this.props.disabled) {\r\n      this.editor.disable();\r\n      this.set('disabled', true);\r\n    }\r\n\r\n    if (this.$node.hasAttribute('dmxDomId')) {\r\n      this.editor.layoutInfo.editor.attr('dmxDomId', this.$node.getAttribute('dmxDomId'));\r\n    }\r\n  },\r\n  */\r\n\r\n});\r\n"]}